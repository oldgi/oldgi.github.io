[{"categories":["Python"],"contents":"上 Hawhow 課程：Python 入門特訓 - 基礎實作到證照攻略。 今天交作業。\n作業 1 - 倍數的個數與總和 1_使用者輸入兩個正整數 a 和 b, 其中 a 必需 \u0026lt;= b 2_找到 a 和 b 之間 7 或 11 的倍數並印出 3_印出的時候，一列輸出 10 個數字，欄寬為 4，靠左對齊 4_最後印出倍數的個數及總和\n下面是效果和我的代碼 a=int(input(\u0026#34;請輸入第一個整數 a : \u0026#34;)) b=int(input(\u0026#34;請輸入第二個整數 b (請注意 b \u0026gt;= a): \u0026#34;)) while b \u0026lt; a: b=int(input(\u0026#34;請輸入第二個整數 b (請注意 b \u0026gt;= a): \u0026#34;)) count=0 sum_num=0 i=a while i \u0026lt;= b: if i%7==0 or i%11==0: count+=1 sum_num+=i if count%10 != 0: print(\u0026#34;{:\u0026lt;4}\u0026#34;.format(i),end=\u0026#34;\u0026#34;) else: print() i+=1 print(\u0026#34;在{}和{}之間為 7 或 11 的位數 {} 個，加總為 {}\u0026#34;.format(a,b,count,sum_num)) 同樣的作業叫 chatGPT寫呢？ 這裡 count 用來計算輸了幾個數字。 列印時想要以 \u0026lsquo;+\u0026rsquo; 來串成輸出內容時，因為都要是 \u0026lsquo;str\u0026rsquo; 型態才行，所以這裡有使用到像 str(count) 的寫法。 下面是效果和 chatGPT 的代碼，明顥比我簡潔又好讀多了。 count=1 maxnum = int(input(\u0026#34;請輸入第\u0026#34;+str(count)+\u0026#34;個數字，直到9999結束：\u0026#34;)) userInput = maxnum while userInput != 9999: if userInput \u0026gt; maxnum: maxnum = userInput count += 1 userInput = int(input(\u0026#34;請輸入第\u0026#34;+str(count)+\u0026#34;個數字，直到9999結束：\u0026#34;)) print(\u0026#34;輸入\u0026#34;+str(count)+\u0026#34;個數字，其中最大的值是 : \u0026#34;,maxnum) ","permalink":"https://oldgi.github.io/blog/20230127-post6/","tags":["Python","Spyder","Hahow"],"title":"學習日記::Hahow Python 入門特訓 - 基礎實作到證照攻略 (4)"},{"categories":["Python"],"contents":"上 Hawhow 課程：Python 入門特訓 - 基礎實作到證照攻略。 學習使用 for \u0026amp; while 迴圏。\nfor 迴圏的小 tip： 在巢狀迴圏時，動得比較快的數字要放內迴圏 如果用來控制輸出排列要好看，又要固定數量換行（因為print預設結尾會帶\u0026rsquo;\\n\u0026rsquo;），可以內層迴圏 print(\u0026quot;{:\u0026lt;4}\u0026quot;.format(i),end=' ') ，然後在上一層次迴圏要汞再做一次print() 指定 for 迴圏的範圍時，使用的語法像是：for i in range(7):；其中的 i 是由 0~6；在使用時要特別注意。 while 迴圏的小 tip： while 中的 break —— 有時候在某些條件成立之下，希望強制跳出一層的迴圈，可以使用 break 。 while 中的 continue —— 有時候當某個條件成立，是希望迴圈內的後面的程式在這一次不要執行（跳過之意)、但是要再繼續迴圈其他的重複次數；就會使用 continue。 這裡就不會一一列出課堂教的東西，一樣把課程上我寫的小作業貼上做為紀錄。\n用 FOR 迴圏印出 4個方向的直角三角型 下面是效果和我的代碼 n=eval(input(\u0026#34;請輪入三角型階層數 : \u0026#34;)) print(\u0026#34;直角(左下)三角型\u0026#34;) for i in range(1,n+1): print(\u0026#34;＊\u0026#34;*i) print(\u0026#34;直角(右下)三角型\u0026#34;) for i in range(1,n+1): print(\u0026#34;　\u0026#34;*(n-i)+\u0026#34;＊\u0026#34;*i) print(\u0026#34;直角(左上)三角型\u0026#34;) for i in range(1,n+1): print(\u0026#34;＊\u0026#34;*(n-i+1)) print(\u0026#34;直角(右上)三角型\u0026#34;) for i in range(n): print(\u0026#34;　\u0026#34;*i+\u0026#34;＊\u0026#34;*(n-i)) 加碼列印等腰三角型 下面是效果和我的代碼 h=eval(input(\u0026#34;請輪入等腰三角型的高 : \u0026#34;)) for i in range(h): print(\u0026#34;　\u0026#34;*(h-i)+\u0026#34;＊\u0026#34;*(2*i+1)) 輸入一堆數字、直到9999出現為止；從中找到最大值 這裡 count 用來計算輸了幾個數字。 列印時想要以 \u0026lsquo;+\u0026rsquo; 來串成輸出內容時，因為都要是 \u0026lsquo;str\u0026rsquo; 型態才行，所以這裡有使用到像 str(count) 的寫法。 下面是效果和我的代碼 count=1 maxnum = int(input(\u0026#34;請輸入第\u0026#34;+str(count)+\u0026#34;個數字，直到9999結束：\u0026#34;)) userInput = maxnum while userInput != 9999: if userInput \u0026gt; maxnum: maxnum = userInput count += 1 userInput = int(input(\u0026#34;請輸入第\u0026#34;+str(count)+\u0026#34;個數字，直到9999結束：\u0026#34;)) print(\u0026#34;輸入\u0026#34;+str(count)+\u0026#34;個數字，其中最大的值是 : \u0026#34;,maxnum) ","permalink":"https://oldgi.github.io/blog/20230126-post5/","tags":["Python","Spyder","Hahow"],"title":"學習日記::Hahow Python 入門特訓 - 基礎實作到證照攻略 (4)"},{"categories":["Python"],"contents":"上 Hawhow 課程：Python 入門特訓 - 基礎實作到證照攻略。 學習使用 if 迴圏。 if是十分常見的判斷式，你在英文口語中也經常用到：\n如果-便 if condition:\n換行縮排後接動作。\n如果-便-否則-便 if condition:\n換行縮排後接動作。 else:\n換行縮排後接動作。\n另外還有巢狀式結構的用法 這裡提醒自己的是，條件之後要加上 \u0026ldquo;:\u0026quot;、並且縮排很重要。 這裡就不會一一列出課堂教的東西，一樣把課程上我寫的小作業貼上做為紀錄。\n讓使用者輸入2個整數及運算元，然後印出計算結果 這裡我自己加碼了 運算元什麼都不寫的話就合部印出；另外是除法系列的分不可為０判斷也一恲放入。\n下面是效果和我的代碼 a=eval(input(\u0026#34;Please input 1st integer : \u0026#34;)) b=eval(input(\u0026#34;Please input 2nd integer : \u0026#34;)) operator=input(\u0026#34;Please choose an operator (+, -, *, /, //, %, **, or all) : \u0026#34;) if operator==\u0026#34;+\u0026#34; : print(\u0026#34;加法 : {}{}{} = {}\u0026#34;.format(a,operator,b,a+b)) elif operator==\u0026#34;-\u0026#34; : print(\u0026#34;減法 : {}{}{} = {}\u0026#34;.format(a,operator,b,a-b)) elif operator==\u0026#34;*\u0026#34; : print(\u0026#34;乘法 : {}{}{} = {}\u0026#34;.format(a,operator,b,a*b)) elif operator==\u0026#34;/\u0026#34; : if b==0: print(\u0026#34;「除數不可為 0 」\u0026#34;) else: print(\u0026#34;除法 : {}{}{} = {}\u0026#34;.format(a,operator,b,a/b)) elif operator==\u0026#34;//\u0026#34; : if b==0: print(\u0026#34;「除數不可為 0 」\u0026#34;) else: print(\u0026#34;整除 {}{}{} = {}\u0026#34;.format(a,operator,b,a//b)) elif operator==\u0026#34;%\u0026#34; : if b==0: print(\u0026#34;「除數不可為 0 」\u0026#34;) else: print(\u0026#34;餘數 : {}{}{} = {}\u0026#34;.format(a,operator,b,a%b)) elif operator==\u0026#34;**\u0026#34; : print(\u0026#34;乘方 : {}{}{} = {}\u0026#34;.format(a,operator,b,a**b)) else: print(\u0026#34;加法 : {}+{} = {}\u0026#34;.format(a,b,a+b)) print(\u0026#34;減法 : {}-{} = {}\u0026#34;.format(a,b,a-b)) print(\u0026#34;乘法 : {}*{} = {}\u0026#34;.format(a,b,a*b)) print(\u0026#34;乘方 : {}**{} = {}\u0026#34;.format(a,b,a**b)) if b==0: print(\u0026#34;「除數不可為 0 」, 無法執行 除法, 整除, 及餘數。\u0026#34;) else: print(\u0026#34;除法 : {}/{} = {}\u0026#34;.format(a,b,a/b)) print(\u0026#34;整除 : {}//{} = {}\u0026#34;.format(a,b,a//b)) print(\u0026#34;餘數 : {}%{} = {}\u0026#34;.format(a,b,a%b)) 讓使用者輸入西元年份（YYYY），計算該年份是否為閏年後印出 這裡在設計公式時腦子一時錯亂，直接google了閏年公式；直接照他的邏輯寫，結果証明這個輯有問題。\n# v1.0 不管用的原因是 myYear 應該要用 int 的 type myYear=eval(input(\u0026#34;input a year with format YYYY : \u0026#34;)) # 上面這行的 eval 改 int 也就可以了 if myYear%4==0: if myYear%100==0: if myYear%400==0: print(\u0026#34;The Year is {} is a Leap Year(366 days)\u0026#34;.format(myYear)) else: print(\u0026#34;The Year is {} is NOT a Leap Year(365 days)\u0026#34;.format(myYear)) else: print(\u0026#34;The Year is {} is NOT a Leap Year(365 days)\u0026#34;.format(myYear)) else: print(\u0026#34;The Year is {} is NOT a Leap Year(365 days)\u0026#34;.format(myYear)) 因為一直失敗我就求助了chatGPT，看了他的寫法覺得既簡潔又有力；同時還發現本來的寫法只要把資料型別換對成 int 也就能正常運作。為了不要太丟臉自己加碼了可以連續計算的 while。\n下面是效果和修改一點chatGPT的代碼 year = int(input(\u0026#34;Enter a year(end with 9999) : \u0026#34;)) while year != 9999: if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0): print(\u0026#34;The Year \u0026#34;+str(year)+\u0026#34; is a leap year(366 days).\u0026#34;) else: print(\u0026#34;The Year \u0026#34;+str(year)+\u0026#34; is NOT a leap year(365 days).\u0026#34;) year = int(input(\u0026#34;Enter a year(end with 9999) : \u0026#34;)) ","permalink":"https://oldgi.github.io/blog/20230125-post4/","tags":["Python","Spyder","Hahow"],"title":"學習日記::Hahow Python 入門特訓 - 基礎實作到證照攻略 (3)"},{"categories":["Python"],"contents":"上 Hawhow 課程：Python 入門特訓 - 基礎實作到證照攻略。 學程式語言，基本的語言型態、命名規則及內建關鍵字、型別轉換、及格式輸出，是這堂課認為最基本的東西。\n這裡就不會一一列出課堂教的東西，在這幾個章節中，只把我自己寫出來的小作業貼上做為紀錄。\n讓使用者輸入身高及體重後計算BMI並印出 課程裡有提到如何計算BMI的公式，這裡應用到的是：\n在console產生提示語並接受一個輸入值。 將輸入值存到指定的變數。 使用除法與平方數學運算,並將結果存到提定的變數。 依指定的內容將資訊印出。 下面是效果和我的代碼 # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; calculate BMI=weight / hight**2 \u0026#34;\u0026#34;\u0026#34; x=eval(input(\u0026#34;請輸入身高(cm): \u0026#34;)) y=eval(input(\u0026#34;請輸入體重(kg): \u0026#34;)) z=y/(x/100)**2 print(\u0026#34;您的身高是: \u0026#34;,x,\u0026#34; 您的體重是: \u0026#34;,y,\u0026#34; BMI計算結果為: \u0026#34;,z) 讓使用者輸入攝氏溫度後為他換算成華氏並印出 這裡應用到的是以 {} 將要印出的變數內容排版寫好，這樣在閱讀上也比較有結構。\n下面是效果和我的代碼 # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; 攝氏= 5/9 乘(華氏溫度- 32)。 華氏= (攝氏乘9/5) + 32 \u0026#34;\u0026#34;\u0026#34; tempC=eval(input(\u0026#34;請輸攝式溫度(C): \u0026#34;)) tempF=tempC*5/9+32 print(\u0026#34;攝式溫度 \u0026#34;,tempC,\u0026#34;度相當於華式溫度 \u0026#34;,tempF,\u0026#34;度\u0026#34;) print(\u0026#34;攝式溫度 {} 度，相當於華式溫度 {} 度\u0026#34;.format(tempC, tempF)) 讓使用者輸入甲乙兩點座標並計算其距離並印出 這裡應用到是在 {} 中進一步指定資料輸出的格式，包含指定對齊方式、小數帶幾位等。\n下面是效果和我的代碼 \u0026#34;\u0026#34;\u0026#34; 計算兩點之間的距離 p1=(x1,y1) p2=(x2,y2) distance=square((x1-x2)**2+(y1-y2)**2) \u0026#34;\u0026#34;\u0026#34; x1=eval(input(\u0026#34;請輪入p1的 X 座標 = \u0026#34;)) y1=eval(input(\u0026#34;請輪入p1的 y 座標 = \u0026#34;)) x2=eval(input(\u0026#34;請輪入p2的 X 座標 = \u0026#34;)) y2=eval(input(\u0026#34;請輪入p2的 y 座標 = \u0026#34;)) distance=\u0026#34;p1({},{}) 和 p2({},{}) 之間的距離為 {:10.3f}。\u0026#34;.format(x1,y1,x2,y2,((x1-x2)**2+(y1-y2)**2)**0.5) print(distance) ","permalink":"https://oldgi.github.io/blog/20230124-post3/","tags":["Python","Spyder","Hahow"],"title":"學習日記::Hahow Python 入門特訓 - 基礎實作到證照攻略 (2)"},{"categories":["Python"],"contents":"上 Hawhow 課程：Python 入門特訓 - 基礎實作到證照攻略。 首先不可免俗要在電腦上架設安裝的環境。\n安裝 Python 就算課程不教你也可以使用 google search 到 Python 的網站。以今天 (2023-01-23) 來說，他最新的版本是 \u0026ldquo;3.11.1\u0026rdquo;。 要特別注意的是，如果你開發要使用的是Windows 7的作業系統環境，那不能安裝3.9之後的版本；要下載時也請到Full version list中去找尋需要的版本。 \u0026lsquo;Note that Python 3.9+ cannot be used on Windows 7 or earlier.\u0026rsquo;\n在裝過桯中，要特別注意，勾選將安裝的路徑加入環境變數中。\n以下是我又貪玩問了 chatGPT 如何安裝 Python 的資訊 ＊Prompt=\u0026ldquo;pleases give me instructions step by step before I learn python.\u0026rdquo;*\n以下是我得到的回答：\nSure, here are the steps to install Python on a Windows 11 platform:\nOpen your web browser and navigate to the official Python website (https://www.python.org/) Click on the \u0026ldquo;Downloads\u0026rdquo; link on the top menu, and then click on the \u0026ldquo;Windows\u0026rdquo; button to download the latest version of Python for Windows. Once the download is complete, open the installer file and follow the prompts to install Python. During the installation process, make sure to check the option to \u0026ldquo;Add Python to PATH\u0026rdquo; or \u0026ldquo;Add Python to environment variables\u0026rdquo;, this will allow you to run Python from the command prompt or terminal. After the installation is complete, open the Command Prompt (press Win+R then type cmd) and type python \u0026ndash;version to confirm that Python has been installed successfully. \u0026hellip; 我在 windows 11 下安裝 Python 3.11.1 後，python \u0026ndash;version 請改用 python -Ｖ 來檢查版本資訊。可以用 python -h 來查有什麼不同的指令；要注意大小寫是不同的。\n安裝 Anaconda 套件 裝他最重要的就是 (1) 基於課程要求 (2) 他包含大多數基本調程會用到的套件。\n這裡我只說一下他的好處，就是他有瀏覽和搜尋的功能，能讓你快速的看出你裝了哪些Python的套件。我沒有再進一步的研究，在下載件的網頁上他也有問你要要不要申請會員，不是強制的，我就沒有申請了。\n最後是，這次會用到的IDE環境 Spyder 在安裝 Anaconda 時也就一起裝好了。\nSpyder::Python專用的IDE開發工具 Spyder is a free and open source scientific environment written in Python, for Python, and designed by and for scientists, engineers and data analysts.\n像我這樣啥也不會的中年老白，一直聽到縮寫時，忍不住去科普一下自己啥是IDE。以下是WIKI的說明\n整合開發環境（Integrated Development Environment，簡稱IDE，也稱為Integration Design Environment、Integration Debugging Environment）是一種輔助程式開發人員開發軟體的應用軟體，在開發工具內部就可以輔助編寫原始碼文字、並編譯打包成為可用的程式，有些甚至可以設計圖形介面。\n簡單的說法是，他會幫你查看開發時的許多資訊，最常用的就是指令是什麼，指令怎麼用，以及跑執行的結果，協助你debug等等等。不裝也沒有不可以吧，但我是跟著課程學習，快最重要，這裡我就不多研究了。\n到此為止，環境的安裝就算完成了。\n","permalink":"https://oldgi.github.io/blog/20230123-post2/","tags":["Python","Spyder","Hahow"],"title":"學習日記::Hahow Python 入門特訓 - 基礎實作到證照攻略 (1)"},{"categories":["Markdown"],"contents":"我上完了 Hawhow 的課程：Github 免費架站術！輕鬆打造個人品牌。 課程有介一個Typora軟體可以即時Preview Markdown的效果；但我覺得麻煩，不想多裝一個軟體。 在VS Code的extensions中輸入markdown後，找了３個東西安裝。\nExtension 1：Markdown All in One 下載人數最多的那一個。不用額外設定裝好就行。讚讚。 裝他最主要是各種自動化功能，像是\n＊貼上超連結自動完成語法\r＊清單中 Enter 自動接續縮排\r＊數學公式等實用功能\r＊...\r有興趣者可參考 Markdown All in One – Visual Studio Marketplace https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one 的說明內容。\n功能多多，可以看文件操作一下 Extension 2：Markdown Preview Enhanced 裝他最重要的就是 Preview。 即使是假掰的微積分公弍也行——使用 \\int_積分下限^積分上限 {積分表達式} $$\\int_0^1 {x^2} \\,{\\rm d}x $$ 效果就會是：$$\\int_0^1 {x^2} ,{\\rm d}x $$ 喜歡公式的人可以參考 如何在 Markdown 輸入數學公式及符號\n黃框按下去就可以啟用預覽了 公式的預覽效果 Extension 3：Markdown PDF 故名思意這個自然是能夠讓你將 md file export成pdf。 安裝後就生效了，使用方式也十分容易，在編輯框 left-click-mouse 叫出的浮動視窗中就有 export 成 pdf 的選項。 這個十分容易，我就不截圖了。\n","permalink":"https://oldgi.github.io/blog/20230121-post1/","tags":["Markdown","VS code","Hahow"],"title":"How to Preview Markdown text in Visual Studio Code"}]